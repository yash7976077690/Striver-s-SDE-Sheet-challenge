#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
void left_helper(TreeNode<int> *root, int level, int &max_level, vector<int> &results) {
    // base case
    if(!root)
        return;
    
    // store the first encountered node (leftmost) at each new level
    if(level > max_level) {
        max_level = level;
        results.push_back(root->data);
    }
    // recursive calls: left subtree first
    left_helper(root->left, level + 1, max_level, results);
    left_helper(root->right, level + 1, max_level, results);
}
vector<int> getLeftView(TreeNode<int> *root)
{
    //    Write your code here
     vector<int> results;
    int max_level = -1;
    // call to the helper function
    left_helper(root, 0, max_level, results);

    return results;
}
