/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
#include<queue>
using namespace std;
class NodevaluePair{
    public:
    int value;
    Node *node;
    NodevaluePair(Node *node,int value){
        this->node=node;
        this->value=value;
    }
    bool operator < (const NodevaluePair &other) const {
        return value > other.value;
    }
};
Node* flattenLinkedList(Node* head) 
{
	// Write your code here
    Node *pointer=head;
    Node *result=NULL;
    priority_queue<NodevaluePair>pq;
    while(pointer!=NULL){
        pq.push(NodevaluePair(pointer,pointer->data));
        pointer=pointer->next;
    }
    while(!pq.empty()){
        Node *temp=pq.top().node;
        pq.pop();
        if(temp->child!=NULL){
            pq.push(NodevaluePair(temp->child,temp->child->data));
        }
        if(result==NULL){
            result=temp;
            pointer=temp;
            pointer->next=NULL;
        }
        else{
            pointer->child=temp;
            pointer=temp;
            pointer->next=NULL;
        }
    }
    return result;
    
}
